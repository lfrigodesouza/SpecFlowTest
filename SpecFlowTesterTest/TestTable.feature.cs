// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.0.0.0
//      SpecFlow Generator Version:3.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SpecFlowTesterTest
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class TestTableFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Microsoft.VisualStudio.TestTools.UnitTesting.TestContext _testContext;
        
#line 1 "TestTable.feature"
#line hidden
        
        public virtual Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext
        {
            get
            {
                return this._testContext;
            }
            set
            {
                this._testContext = value;
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("pt"), "TestTable", "    Testar se o conteúdo da tabela está correto\r\n    E também valida se a ordenaç" +
                    "ão está sendo feita como esperado", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "TestTable")))
            {
                global::SpecFlowTesterTest.TestTableFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Microsoft.VisualStudio.TestTools.UnitTesting.TestContext>(_testContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Validar o conteudo da tabela")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "TestTable")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("testTable")]
        public virtual void ValidarOConteudoDaTabela()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validar o conteudo da tabela", null, new string[] {
                        "testTable"});
#line 7
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "nome",
                        "sobrenome",
                        "email"});
            table1.AddRow(new string[] {
                        "Frank",
                        "Bach",
                        "fbach@yahoo.com"});
            table1.AddRow(new string[] {
                        "Tim",
                        "Conway",
                        "tconway@earthlink.net"});
            table1.AddRow(new string[] {
                        "Jason",
                        "Doe",
                        "jdoe@hotmail.com"});
            table1.AddRow(new string[] {
                        "John",
                        "Smith",
                        "jsmith@gmail.com"});
#line 8
    testRunner.Given("que eu possuo esses cadastros:", ((string)(null)), table1, "Dado ");
#line 14
    testRunner.When("eu acessar a pagina da tabela", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line 15
    testRunner.Then("todos os valores devem estar na tabela", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Entao ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Validar ordenacao dos dados da tabela")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "TestTable")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("testTable")]
        public virtual void ValidarOrdenacaoDosDadosDaTabela()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validar ordenacao dos dados da tabela", null, new string[] {
                        "testTable"});
#line 18
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "nome",
                        "sobrenome",
                        "email"});
            table2.AddRow(new string[] {
                        "Frank",
                        "Bach",
                        "fbach@yahoo.com"});
            table2.AddRow(new string[] {
                        "Tim",
                        "Conway",
                        "tconway@earthlink.net"});
            table2.AddRow(new string[] {
                        "Jason",
                        "Doe",
                        "jdoe@hotmail.com"});
            table2.AddRow(new string[] {
                        "John",
                        "Smith",
                        "jsmith@gmail.com"});
#line 19
    testRunner.Given("que eu possuo esses cadastros:", ((string)(null)), table2, "Dado ");
#line 25
    testRunner.When("eu acessar a pagina da tabela", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line 26
    testRunner.And("solicitar a ordenacao pelo nome", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 27
    testRunner.Then("todos os valores devem estar na tabela", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Entao ");
#line 28
    testRunner.And("a sequencia deve estar correta", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
